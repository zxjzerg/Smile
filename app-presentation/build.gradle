apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        applicationId "com.zxjdev.smile"
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName

        buildConfigField "String", "LEANCOULD_APP_KEY", rootProject.ext.leancloud_app_key
        buildConfigField "String", "LEANCOULD_APP_ID", rootProject.ext.leancloud_app_id
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        // 遍历所有的variant并执行重命名逻辑
        applicationVariants.all { variant ->
            if (variant.name.contains("release")) {
                renameAPK(variant)
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
    }

    flavorDimensions "mode"

    productFlavors {
        develop {
            dimension "mode"
            minSdkVersion 21
        }
    }
}

def renameAPK(variant) {
    variant.outputs.all { output ->

        // 获取HEAD的git分支名
        def branch = getGitRevParseInfo("--abbrev-ref")

        // 获取HEAD的commit信息
        def revision = ext.revision = getGitRevParseInfo("--short")

        // 重新生成一个输出的文件名
        def fileName = variant.buildType.name + "_" + branch + "_" + revision + ".apk"

        // 设置新的文件名给输出文件
        outputFileName = fileName
    }
}

// 获取git的信息
static def getGitRevParseInfo(what) {
    def cmd = "git rev-parse " + what + " HEAD"
    def process = cmd.execute()
    process.text.trim()
}

dependencies {
    compile project(':app-domain')
    compile project(':app-data')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile rootProject.ext.android_support_v7
    compile rootProject.ext.android_support_design

    compile rootProject.ext.rxjava2
    compile rootProject.ext.rxandroid2

    compile rootProject.ext.dagger
    compile rootProject.ext.dagger_android
    compile rootProject.ext.dagger_android_support
    kapt rootProject.ext.dagger_processor
    kapt rootProject.ext.dagger_android_processor

    compile rootProject.ext.butterknife
    kapt rootProject.ext.butterknife_compiler

    compile rootProject.ext.leancloud_basic

    compile rootProject.ext.timber

    compile rootProject.ext.circle_image

    debugCompile rootProject.ext.leak_canary_debug
    releaseCompile leak_canary_release
    testCompile leak_canary_release

    compile rootProject.ext.stetho

    testCompile rootProject.ext.junit

    compile rootProject.ext.glide
    compile rootProject.ext.glide_transformations

    compile rootProject.ext.android_support_constaint

    compile rootProject.ext.android_support_cardview

    compile rootProject.ext.android_support_percent

    compile rootProject.ext.image_crop
}
